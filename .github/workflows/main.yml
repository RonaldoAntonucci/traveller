# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:

  push:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
          
      # instalar as dependências NPM/Yarn
      - name: Install dependencies
        run: cd api && yarn

      # Executar os testes
      - name: testes
        run: yarn test:api
        
      # Executar a build 
      - name: Run build
        run: yarn build:api
        
      # Copiar a pasta dist para dentro da Digital Ocean
      - name: copy src code to Digital Ocean
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASS }}
          source: "."
          target: "app/traveller"
        
      # Substituir o código existente na pasta "dist" pelo novo código
      # Executar "yarn" na Digital Ocean
      # Executar as migrations do TypeOrm
      # Restart no servidor Node.js
